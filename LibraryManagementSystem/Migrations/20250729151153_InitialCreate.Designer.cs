// <auto-generated />
using System;
using LibraryManagementSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementSystem.Migrations
{
    [DbContext(typeof(Sql12792576Context))]
    [Migration("20250729151153_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "latin1");

            modelBuilder.Entity("LibraryManagementSystem.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AuthorId")
                        .HasName("PRIMARY");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("AvailableCopies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ISBN");

                    b.Property<int?>("PublishedYear")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TotalCopies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("BookId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AuthorId" }, "AuthorId");

                    b.HasIndex(new[] { "GenreId" }, "GenreId");

                    b.HasIndex(new[] { "Isbn" }, "ISBN")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.BorrowTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int?>("BookId")
                        .HasColumnType("int(11)");

                    b.Property<DateOnly?>("BorrowDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("FineAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValueSql("'0.00'");

                    b.Property<DateOnly?>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BookId" }, "BookId");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("BorrowTransactions");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("GenreId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("TokenId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserId")
                        .HasDatabaseName("UserId1");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int?>("BookId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("ReviewId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BookId" }, "BookId")
                        .HasDatabaseName("BookId1");

                    b.HasIndex(new[] { "UserId" }, "UserId")
                        .HasDatabaseName("UserId2");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('admin','user')")
                        .HasDefaultValueSql("'user'");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Book", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("Books_ibfk_1");

                    b.HasOne("LibraryManagementSystem.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("Books_ibfk_2");

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.BorrowTransaction", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Book", "Book")
                        .WithMany("BorrowTransactions")
                        .HasForeignKey("BookId")
                        .HasConstraintName("BorrowTransactions_ibfk_2");

                    b.HasOne("LibraryManagementSystem.Models.User", "User")
                        .WithMany("BorrowTransactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("BorrowTransactions_ibfk_1");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.RefreshToken", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("RefreshTokens_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Review", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .HasConstraintName("Reviews_ibfk_2");

                    b.HasOne("LibraryManagementSystem.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Reviews_ibfk_1");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Book", b =>
                {
                    b.Navigation("BorrowTransactions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.User", b =>
                {
                    b.Navigation("BorrowTransactions");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
